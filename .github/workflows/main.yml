name: Publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  release:
    name: Release
    strategy:
      matrix:
        kind: ['linux', 'windows']
        include:
          - kind: linux
            os: ubuntu-latest
            target: linux-x64
          - kind: windows
            os: windows-latest
            target: win-x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'

      - name: Define enviroment
        shell: bash
        run: |
          release_tag=$(git describe --tags --abbrev=0)
          echo "release_tag=$release_tag"
          echo "release_tag=$release_tag" >> $GITHUB_ENV
          release_name="EmailKit-${{ matrix.target }}-$release_tag"          
          echo "release_name=$release_name"
          echo "release_name=$release_name" >> $GITHUB_ENV
            
          if [ "${{ matrix.target }}" == "win-x64" ]; then
            echo "release_filename=$release_name.zip"
            echo "release_filename=$release_name.zip" >> $GITHUB_ENV
          else
            echo "release_filename=$release_name.tar.gz"
            echo "release_filename=$release_name.tar.gz" >> $GITHUB_ENV
          fi

      - name: Build
        shell: bash
        run: |
          # Build everything
          dotnet publish EmailKit/EmailKit.csproj --framework netcoreapp3.1 --runtime "${{ matrix.target }}" -c Release -o "${{ env.release_name }}"

          # Pack files
          if [ "${{ matrix.target }}" == "win-x64" ]; then
            # Pack to zip for Windows
            7z a -tzip "${{ env.release_filename }}" "./${{ env.release_name }}/*"
          else
            tar czvf "${{ env.release_filename }}" "${{ env.release_name }}"
          fi

          # Delete output directory
          rm -r "${{ env.release_name }}"

      - name: Publish
        id: publish
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          files: ${{ env.release_filename }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
